// <auto-generated />
using System;
using System.Collections.Generic;
using Backend.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Infrastructure.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20251017172209_Added_BusWidth_and_CudaCores")]
    partial class Added_BusWidth_and_CudaCores
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentNumber")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Street", "Backend.Domain.Entities.Address.Street#Street", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Number")
                                .HasColumnType("int")
                                .HasColumnName("StreetNumber");

                            b1.Property<string>("StreetName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("StreetName");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Backend.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Instructions")
                        .HasColumnType("TEXT");

                    b.Property<int>("ShippingId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShippingId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProductBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("InitialPrice")
                        .HasColumnType("float");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ModelName")
                        .IsUnique();

                    b.ToTable("Products", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<int>("ShippingType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Shippings", (string)null);
                });

            modelBuilder.Entity("Backend.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ProductBaseUser", b =>
                {
                    b.Property<int>("LikedById")
                        .HasColumnType("int");

                    b.Property<Guid>("LikedProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LikedById", "LikedProductsId");

                    b.HasIndex("LikedProductsId");

                    b.ToTable("ProductBaseUser");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Cpu", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ProductBase");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<int>("Socket")
                        .HasColumnType("int");

                    b.Property<int>("Tdp")
                        .HasColumnType("int");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("ClockSpeed", "Backend.Domain.Entities.Cpu.ClockSpeed#ClockSpeed", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Base")
                                .HasColumnType("float")
                                .HasColumnName("ClockSpeedBase");

                            b1.Property<double>("Boost")
                                .HasColumnType("float")
                                .HasColumnName("ClockSpeedBoost");
                        });

                    b.ToTable("Cpus");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Gpu", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ProductBase");

                    b.Property<int>("BusWidth")
                        .HasColumnType("int");

                    b.Property<int>("CudaCores")
                        .HasColumnType("int");

                    b.Property<int>("DirectXSupport")
                        .HasColumnType("int");

                    b.Property<int>("Tdp")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("ClockSpeed", "Backend.Domain.Entities.Gpu.ClockSpeed#ClockSpeed", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Base")
                                .HasColumnType("float")
                                .HasColumnName("ClockSpeedBase");

                            b1.Property<double>("Boost")
                                .HasColumnType("float")
                                .HasColumnName("ClockSpeedBoost");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Memory", "Backend.Domain.Entities.Gpu.Memory#Memory", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("CapacityInGb")
                                .HasColumnType("int")
                                .HasColumnName("MemoryCapacity");

                            b1.Property<int>("Frequency")
                                .HasColumnType("int")
                                .HasColumnName("MemoryFrequency");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("MemoryType");
                        });

                    b.ToTable("Gpus");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Monitor", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ProductBase");

                    b.Property<int>("DisplayDiagonal")
                        .HasColumnType("int");

                    b.Property<int>("Latency")
                        .HasColumnType("int");

                    b.Property<int>("Matrix")
                        .HasColumnType("int");

                    b.Property<double>("PixelSize")
                        .HasColumnType("float");

                    b.Property<int>("RefreshRate")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Resolution", "Backend.Domain.Entities.Monitor.Resolution#Resolution", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Height")
                                .HasColumnType("int")
                                .HasColumnName("ResolutionHeight");

                            b1.Property<int>("Width")
                                .HasColumnType("int")
                                .HasColumnName("ResolutionWidth");
                        });

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Motherboard", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ProductBase");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("FormFactor")
                        .HasColumnType("int");

                    b.Property<int>("PcieSlots")
                        .HasColumnType("int");

                    b.Property<int>("RamSlots")
                        .HasColumnType("int");

                    b.Property<int>("Socket")
                        .HasColumnType("int");

                    b.ToTable("Motherboards");
                });

            modelBuilder.Entity("Backend.Domain.Entities.PowerSupply", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ProductBase");

                    b.Property<int>("EfficiencyPercentage")
                        .HasColumnType("int");

                    b.Property<int>("FormFactor")
                        .HasColumnType("int");

                    b.Property<int>("Modularity")
                        .HasColumnType("int");

                    b.Property<int>("Wattage")
                        .HasColumnType("int");

                    b.ToTable("PowerSupplies");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Ram", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ProductBase");

                    b.Property<string>("Timing")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.ComplexProperty<Dictionary<string, object>>("Memory", "Backend.Domain.Entities.Ram.Memory#Memory", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("CapacityInGb")
                                .HasColumnType("int")
                                .HasColumnName("MemoryCapacity");

                            b1.Property<int>("Frequency")
                                .HasColumnType("int")
                                .HasColumnName("MemoryFrequency");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("MemoryType");
                        });

                    b.ToTable("Rams");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Storage", b =>
                {
                    b.HasBaseType("Backend.Domain.Entities.ProductBase");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Memory", "Backend.Domain.Entities.Storage.Memory#Memory", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("CapacityInGb")
                                .HasColumnType("int")
                                .HasColumnName("MemoryCapacity");

                            b1.Property<int>("Frequency")
                                .HasColumnType("int")
                                .HasColumnName("MemoryFrequency");

                            b1.Property<int>("Type")
                                .HasColumnType("int")
                                .HasColumnName("MemoryType");
                        });

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Address", b =>
                {
                    b.HasOne("Backend.Domain.Entities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Cart", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Backend.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.City", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Item", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Domain.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Backend.Domain.Entities.ProductBase", "Product")
                        .WithMany("Items")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Order", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Shipping", "Shipping")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shipping");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProductBase", b =>
                {
                    b.HasOne("Backend.Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Review", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ProductBase", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductBaseUser", b =>
                {
                    b.HasOne("Backend.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("LikedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Domain.Entities.ProductBase", null)
                        .WithMany()
                        .HasForeignKey("LikedProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Cpu", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ProductBase", null)
                        .WithOne()
                        .HasForeignKey("Backend.Domain.Entities.Cpu", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Gpu", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ProductBase", null)
                        .WithOne()
                        .HasForeignKey("Backend.Domain.Entities.Gpu", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Monitor", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ProductBase", null)
                        .WithOne()
                        .HasForeignKey("Backend.Domain.Entities.Monitor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Motherboard", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ProductBase", null)
                        .WithOne()
                        .HasForeignKey("Backend.Domain.Entities.Motherboard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.PowerSupply", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ProductBase", null)
                        .WithOne()
                        .HasForeignKey("Backend.Domain.Entities.PowerSupply", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Ram", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ProductBase", null)
                        .WithOne()
                        .HasForeignKey("Backend.Domain.Entities.Ram", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Storage", b =>
                {
                    b.HasOne("Backend.Domain.Entities.ProductBase", null)
                        .WithOne()
                        .HasForeignKey("Backend.Domain.Entities.Storage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Backend.Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Backend.Domain.Entities.ProductBase", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Backend.Domain.Entities.Shipping", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Backend.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
